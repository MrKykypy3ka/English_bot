import re
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from functions import *
import app.keyboards as kb
from datetime import datetime, timedelta

from create_bot import send_newsletter_everyone, send_newsletter_one

router = Router()
scheduler = AsyncIOScheduler()


class Admin(StatesGroup):
    login = State()


class Newsletter(StatesGroup):
    subscription = State()
    link = State()
    data = State()


class People(StatesGroup):
    login = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(
        f"""–ü—Ä–∏–≤–µ—Ç {message.from_user.username}! –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç @engncity
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ–Ω—è –∏ –º–æ–∏—Ö –∫–æ–ª–ª–µ–≥.""",
        reply_markup=kb.user_keyboard)


@router.message(F.text.lower() == 'admin')
async def admin_menu(message: Message):
    if message.from_user.username in read_config()["Admins"]:
        await message.answer(f'–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                             reply_markup=kb.admin_keyboard)
    else:
        await message.answer(f'–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°')


@router.message(F.text == 'ü´°–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤')
async def edit_admins(message: Message):
    if message.from_user.username in read_config()["Admins"]:
        await message.answer(f'–ê–¥–º–∏–Ω—ã:\n'
                             f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥–º–∏–Ω–∞ —á—Ç–æ–±—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å.',
                             reply_markup=await kb.inline_admins())
    else:
        await message.answer(f'–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°')


@router.message(F.text == 'üì©–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def set_message_list(message: Message):
    await message.answer(f"""–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:
    
‚ùó–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏¬ª""",
                         reply_markup=await kb.inline_subscribes())


@router.message(F.text == 'üì∞–ù–æ–≤–æ—Å—Ç–∏')
async def set_message_list(message: Message):
    y, mo, d, h, mi, s = re.split(r"[- :]", read_config()['newsletter']['date'])
    if datetime(*list(map(int, [y, mo, d, h, mi, s]))) > datetime.now():
        await message.answer(f"""–°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {d}.{mo}.{y} –≤ {h}:{mi}""",
                             reply_markup=kb.user_keyboard)
    else:
        await message.answer(f"""–†–∞—Å—Å—ã–ª–∫–∞ –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.""",
                             reply_markup=kb.user_keyboard)


@router.message(F.text == '‚ÑπÔ∏è–ò–Ω—Ñ–æ')
async def set_message_list(message: Message):
    await message.answer(f"""
–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ ‚ú®

–ó–¥–µ—Å—å –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏:
üü£ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–µ–±—è, –±—É–¥—å –í—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —É—á–∞—â–∏–º—Å—è

–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª - @engncity:
üü£ –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ
üü£ –†–∞–∑–≥–ª–∞–≥–æ–ª—å—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ –∂–∏–∑–Ω–∏ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–∏

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è: @lilith_slip""",
                         reply_markup=kb.user_keyboard)


@router.message(F.text == '–í—ã–π—Ç–∏')
async def back(message: Message):
    await message.answer(text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.user_keyboard)


@router.callback_query(F.data == 'check')
async def subscribe(callback: CallbackQuery):
    try:
        if await check_subscriptions(callback):
            y, mo, d, h, mi, s = re.split(r"[- :]", read_config()['newsletter']['date'])
            write_user(callback.from_user.id)
            await callback.message.answer(
                f"""–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏ üíú
–ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã {d}.{mo}.{y} –≤ {h}:{mi}

‚ùóÔ∏è–ù–µ –æ—Ç–º–µ–Ω—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –ø—Ä–∏—à–ª–µ—Ç –í–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã """)
        else:
            await callback.message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.")
    except TelegramBadRequest as e:
        print(e)


@router.callback_query(F.data.startswith('user'))
async def del_admin(callback: CallbackQuery):
    data = read_config()
    data["Admins"].remove(callback.data.split(": ")[1])
    write_config(data)
    await callback.message.answer(f'–ê–¥–º–∏–Ω —É–¥—ë–ª—ë–Ω', reply_markup=await kb.inline_admins())


@router.callback_query(F.data == 'append')
async def write_admin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.login)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")


@router.message(Admin.login)
async def add_admin(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    data = read_config()
    login = await state.get_data()
    data["Admins"].append(login["login"])
    write_config(data)
    await state.clear()
    await message.answer(f'–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=await kb.inline_admins())


@router.message(F.text == '‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def edit_message_list(message: Message, state: FSMContext):
    if message.from_user.username in read_config()["Admins"]:
        await state.set_state(Newsletter.subscription)
        await message.answer(f"""–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:\n""")
    else:
        await message.answer(f'–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°')


@router.message(Newsletter.subscription)
async def write_link(message: Message, state: FSMContext):
    await state.update_data(subscription=message.text)
    await state.set_state(Newsletter.link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:")


@router.message(Newsletter.link)
async def write_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    await state.set_state(Newsletter.data)
    await message.answer("""–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏:\n
—Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –ì–æ–¥ –ú–µ—Å—è—Ü –î–µ–Ω—å –ß–∞—Å –ú–∏–Ω—É—Ç—ã""")


@router.message(Newsletter.data)
async def edit_message_list(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    config = read_config()
    data = await state.get_data()
    try:
        temp = dict()
        for elem in data['subscription'].split(' '):
            name = elem[elem.rfind('/') + 1:]
            temp[name] = elem
        config["newsletter"]["subscription"] = temp
        config["newsletter"]["link"] = data['link']
        today = datetime.now()
        y, mo, d, h, mi = list(map(int, (data['date']).split(' ')))
        custom_date = datetime(y, mo, d, h, mi)
        if custom_date < today:
            raise
        config["newsletter"]["date"] = str(custom_date)
        write_config(config)
        print(data['date'])
        with open("data/users.txt", "r", encoding='utf-8') as f:
            users = list(map(str.strip, f.readlines()))
            for user_id in users:
                await message.bot.send_message(text=f"""–£–†–ê! –ì–æ—Ç–æ–≤—ã –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!
–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞:
{d}.{mo}.{y} –≤ {h}:{mi}""",
                                               chat_id=user_id)
        with open("data/users.txt", "w", encoding='utf-8') as f:
            f.write('')

        scheduler.remove_all_jobs()
        scheduler.add_job(send_newsletter_everyone, 'date', run_date=str(custom_date))
        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', reply_markup=kb.admin_keyboard)
    except Exception as e:
        print(e)
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    await state.clear()


@router.message(F.text == 'Ô∏èüë®‚Äçüë©‚Äçüë¶‚Äçüë¶–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º (–≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π)')
async def sand_all(message: Message):
    scheduler.add_job(send_newsletter_everyone, 'date', run_date=str(datetime.now() + timedelta(seconds=5)))
    await message.answer(f"""–ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏–¥—ë—Ç —Ä–∞—Å—Å—ã–ª–∫–∞""")


# @router.message(F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É')
# async def sand_all(message: Message, state: FSMContext):
#     await state.set_state(People.login)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:")


@router.message(People.login)
async def send_newsletter(message: Message, state: FSMContext):
    scheduler.add_job(send_newsletter_one, 'date',
                      run_date=str(datetime.now() + timedelta(seconds=5)),
                      args=[message.text])
    await message.answer(f"""–ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏–¥—ë—Ç —Ä–∞—Å—Å—ã–ª–∫–∞""")
    await state.clear()


@router.message()
async def handle_unmatched_message(message: Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=kb.user_keyboard)
