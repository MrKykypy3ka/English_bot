from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from config import *
import app.keyboards as kb


router = Router()


class Admin(StatesGroup):
    login = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç!{message.from_user.id} {message.from_user.username}',
                        reply_markup=kb.user_keyboard)


@router.message(F.text.lower() == 'admin')
async def admin_menu(message: Message):
    if message.from_user.username in read_config()["Admins"]:
        await message.answer(f'–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                            reply_markup=kb.admin_keyboard)
    else:
        await message.answer(f'–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°')


@router.message(F.text == 'ü´°–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤')
async def edit_admins(message: Message):
    if message.from_user.username in read_config()["Admins"]:
        await message.reply(f'–ê–¥–º–∏–Ω—ã:'
                            f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥–º–∏–Ω–∞ —á—Ç–æ–±—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å.',
                            reply_markup=await kb.inline_admins())
    else:
        await message.answer(f'–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°')


@router.message(F.text == '‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def edit_message_list(message: Message):
    if message.from_user.username in read_config()["Admins"]:
        await message.reply()
    else:
        await message.answer(f'–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°')


@router.message(F.text == 'üì©–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def set_message_list(message: Message):
    await message.answer(f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:',
                        reply_markup=await kb.inline_subscribes())


@router.message(F.text == '–í—ã–π—Ç–∏')
async def back(message: Message):
    await message.answer(text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.user_keyboard)


@router.callback_query(F.data == 'check')
async def subscribe(callback: CallbackQuery):
    await callback.message.answer(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫...')


@router.callback_query(F.data.startswith('user'))
async def del_admin(callback: CallbackQuery):
    data = read_config()
    data["Admins"].remove(callback.data.split(": ")[1])
    write_config(data)
    await callback.message.answer(f'–ê–¥–º–∏–Ω —É–¥—ë–ª—ë–Ω', reply_markup=await kb.inline_admins())


@router.callback_query(F.data == 'append')
async def write_admin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.login)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")


@router.message(Admin.login)
async def add_admin(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    data = read_config()
    login = await state.get_data()
    data["Admins"].append(login["login"])
    write_config(data)
    await state.clear()