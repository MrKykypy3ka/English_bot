from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from config import *
import app.keyboards as kb
from datetime import date, datetime


router = Router()


class Admin(StatesGroup):
    login = State()


class MailingList(StatesGroup):
    subscription = State()
    link = State()
    data = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç!{message.from_user.id} {message.from_user.username}',
                        reply_markup=kb.user_keyboard)


@router.message(F.text.lower() == 'admin')
async def admin_menu(message: Message):
    if message.from_user.username in read_config()["Admins"]:
        await message.answer(f'–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                            reply_markup=kb.admin_keyboard)
    else:
        await message.answer(f'–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°')


@router.message(F.text == 'ü´°–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤')
async def edit_admins(message: Message):
    if message.from_user.username in read_config()["Admins"]:
        await message.answer(f'–ê–¥–º–∏–Ω—ã:\n'
                            f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥–º–∏–Ω–∞ —á—Ç–æ–±—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å.',
                            reply_markup=await kb.inline_admins())
    else:
        await message.answer(f'–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°')


@router.message(F.text == 'üì©–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def set_message_list(message: Message):
    await message.answer(f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:',
                        reply_markup=await kb.inline_subscribes())


@router.message(F.text == '–í—ã–π—Ç–∏')
async def back(message: Message):
    await message.answer(text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.user_keyboard)


@router.callback_query(F.data == 'check')
async def subscribe(callback: CallbackQuery):
    user_id = callback.from_user.id
    print(user_id)
    try:
        for chanel in read_config()["mailing list"]["subscription"]:
            member = await callback.message.bot.get_chat_member(chat_id=chanel, user_id=user_id)
            print(member.status)
            if member.status in ["member", "administrator", "creator"]:
                await callback.message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!")
            else:
                await callback.message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.")
    except TelegramBadRequest as e:
        print(e)
        await callback.message.answer("e")


@router.callback_query(F.data.startswith('user'))
async def del_admin(callback: CallbackQuery):
    data = read_config()
    data["Admins"].remove(callback.data.split(": ")[1])
    write_config(data)
    await callback.message.answer(f'–ê–¥–º–∏–Ω —É–¥—ë–ª—ë–Ω', reply_markup=await kb.inline_admins())


@router.callback_query(F.data == 'append')
async def write_admin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.login)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")


@router.message(Admin.login)
async def add_admin(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    data = read_config()
    login = await state.get_data()
    data["Admins"].append(login["login"])
    write_config(data)
    await state.clear()
    await message.answer(f'–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=await kb.inline_admins())


@router.message(F.text == '‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def edit_message_list(message: Message, state: FSMContext):
    if message.from_user.username in read_config()["Admins"]:
        await state.set_state(MailingList.subscription)
        await message.answer(f"""–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n
–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: —Å—Å—ã–ª–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: —Å—Å—ã–ª–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: —Å—Å—ã–ª–∫–∞""")
    else:
        await message.answer(f'–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°')


@router.message(MailingList.subscription)
async def write_link(message: Message, state: FSMContext):
    await state.update_data(subscription=message.text)
    await state.set_state(MailingList.link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:")


@router.message(MailingList.link)
async def write_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    await state.set_state(MailingList.data)
    await message.answer("""–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏:\n
—Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –ì–æ–¥.–ú–µ—Å—è—Ü.–î–µ–Ω—å""")


@router.message(MailingList.data)
async def add_admin(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    config = read_config()
    data = await state.get_data()
    try:
        temp = dict()
        for elem in data['subscription'].split(', '):
            s = elem.split(': ')
            temp[s[0]] = s[1]
        config["mailing list"]["subscription"] = temp
        config["mailing list"]["link"] = data['link']
        today = date.today()
        custom_date = date(*list(map(int, data['date'].split('.'))))
        if custom_date < today:
            raise
        config["mailing list"]["date"] = str(custom_date)
        write_config(config)
        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', reply_markup=kb.admin_keyboard)
    except Exception:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    await state.clear()
